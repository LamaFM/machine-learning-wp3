new_training_set[c(3,4)] = scale(training_set[c(3,4)])
knitr::opts_chunk$set(echo = TRUE)
SNA = read.csv("Social_Network_Ads.csv", header = TRUE, sep = ",")
str(SNA)
summary(SNA)
library(caTools)
set.seed(seed = 123)
split = sample.split(SNA$Purchased, SplitRatio = 0.75)
training_set = subset(SNA, split == TRUE)
testing_set = subset(SNA, split == FALSE)
new_training_set <- training_set
new_training_set[c(3,4)] = scale(training_set[c(3,4)])
summary(training_set)
summary(new_training_set)
model = glm(Purchased ~ Age, family = binomial, data = training_set)
model = glm(Purchased ~ Age, family = binomial, data = training_set)
summary(model)
model = glm(Purchased ~ Age, family = binomial, data = training_set)
new_model = glm(Purchased ~Age, family = binomial, data = new_training_set)
summary(model)
summary(new_model)
summary(model)
knitr::opts_chunk$set(echo = TRUE)
coef(summary(model))[,4]
coef(summary(model))
coef(summary(model))[1,1]
coef(summary(model))[1,2]
coef(summary(model))[2,4]
coef(summary(model))
knitr::opts_chunk$set(echo = TRUE)
SNA = read.csv("Social_Network_Ads.csv", header = TRUE, sep = ",")
str(SNA)
summary(SNA)
library(caTools)
set.seed(seed = 123)
split = sample.split(SNA$Purchased, SplitRatio = 0.75)
unscaled_training_set = subset(SNA, split == TRUE)
unscaled_testing_set = subset(SNA, split == FALSE)
training_set = unscaled_training_set
training_set[c(3,4)] = scale(unscaled_training_set[c(3,4)])
summary(unscaled_training_set[c(3,4)])
summary(training_set[c(3,4)])
model = glm(Purchased ~ Age, family = binomial, data = training_set)
summary(model)
summary(unscaled_training_set[c(3,4)])
summary(training_set[c(3,4)])
install.packages("ggplot2")
library(ggplot2)
summary(unscaled_training_set[c(3,4)]) -> rb1
summary(training_set[c(3,4)]) -> rb2
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
install.packages(c("BH", "bindr", "bindrcpp", "car", "caTools", "cli", "cowplot", "dendextend", "digest", "dplyr", "evaluate", "FactoMineR", "fpc", "ggpubr", "ggrepel", "ggsci", "glue", "highr", "htmlwidgets", "httpuv", "kernlab", "knitr", "lme4", "mclust", "modeltools", "munsell", "mvtnorm", "nloptr", "packrat", "pillar", "pkgconfig", "plogr", "purrr", "quantreg", "R6", "Rcpp", "RCurl", "rgl", "rlang", "robustbase", "rsconnect", "rstudioapi", "scales", "scatterplot3d", "shiny", "sourcetools", "stringi", "stringr", "tidyr", "tidyselect", "trimcluster", "utf8", "viridis", "xtable", "yaml"))
install.packages(c("bindr", "bindrcpp", "car", "caTools", "cli", "cowplot", "dendextend", "digest", "dplyr", "evaluate", "FactoMineR", "fansi", "fpc", "ggpubr", "ggrepel", "ggsci", "glue", "highr", "htmlwidgets", "httpuv", "kernlab", "knitr", "lme4", "mclust", "modeltools", "munsell", "mvtnorm", "nloptr", "packrat", "pillar", "pkgconfig", "plogr", "purrr", "quantreg", "R6", "Rcpp", "RCurl", "rgl", "rlang", "robustbase", "rsconnect", "rstudioapi", "scales", "scatterplot3d", "shiny", "sourcetools", "stringi", "stringr", "tidyr", "tidyselect", "trimcluster", "utf8", "viridis", "xtable", "yaml"))
echo prout
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
install.packages("Rcpp")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
install.packages("installr")
library(installr)
updateR()
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
?knitr::kable
rb1 = kable(unscaled_training_set[c(3,4)], col.names = c("Unscaled Training Set", "" ))
rb1 = kable(unscaled_training_set[c(3,4)], col.names = c("Unscaled Training Set", "" ))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
rb1 = kable(unscaled_training_set[c(3,4)], col.names = c("Unscaled Training Set", "" ))
summary(training_set[c(3,4)]) -> rb2
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
SNA = read.csv("Social_Network_Ads.csv", header = TRUE, sep = ",")
str(SNA)
summary(SNA)
library(caTools)
set.seed(seed = 123)
split = sample.split(SNA$Purchased, SplitRatio = 0.75)
unscaled_training_set = subset(SNA, split == TRUE)
unscaled_testing_set = subset(SNA, split == FALSE)
training_set = unscaled_training_set
training_set[c(3,4)] = scale(unscaled_training_set[c(3,4)])
rb1 = kable(unscaled_training_set[c(3,4)], col.names = c("Unscaled Training Set", "" ))
rb2 = kable(training_set[c(3,4)], col.names = c("Scaled Training Set", ""))
kable(list(rb1, rb2))
kable(rb1, rb2)
cat(c(rb1, rb2))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
SNA = read.csv("Social_Network_Ads.csv", header = TRUE, sep = ",")
str(SNA)
summary(SNA)
library(caTools)
set.seed(seed = 123)
split = sample.split(SNA$Purchased, SplitRatio = 0.75)
unscaled_training_set = subset(SNA, split == TRUE)
unscaled_testing_set = subset(SNA, split == FALSE)
training_set = unscaled_training_set
training_set[c(3,4)] = scale(unscaled_training_set[c(3,4)])
rb1 = kable(unscaled_training_set[c(3,4)], col.names = c("Unscaled Training Set", "" ))
rb2 = kable(training_set[c(3,4)], col.names = c("Scaled Training Set", ""))
cat(c(rb1, rb2))
rb1
rb2
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
SNA = read.csv("Social_Network_Ads.csv", header = TRUE, sep = ",")
str(SNA)
summary(SNA)
library(caTools)
set.seed(seed = 123)
split = sample.split(SNA$Purchased, SplitRatio = 0.75)
unscaled_training_set = subset(SNA, split == TRUE)
unscaled_testing_set = subset(SNA, split == FALSE)
training_set = unscaled_training_set
training_set[c(3,4)] = scale(unscaled_training_set[c(3,4)])
rb1 = kable(summary(unscaled_training_set[c(3,4)]), col.names = c("Unscaled Training Set", "" ))
rb2 = kable(summary(training_set[c(3,4)]), col.names = c("Scaled Training Set", ""))
cat(c(rb1, rb2))
rb1 = kable(summary(unscaled_training_set[c(3,4)]), col.names = c("Unscaled Training Set", "" ))
rb2 = kable(summary(training_set[c(3,4)]), col.names = c("Scaled Training Set", ""))
rb1 = kable(summary(unscaled_training_set[c(3,4)]), format = "latex", col.names = c("Unscaled Training Set", "" ))
rb2 = kable(summary(training_set[c(3,4)]), col.names = c("Scaled Training Set", ""))
cat(c("\\begin{table}[!htb]
\\begin{minipage}{.5\\linewidth}
\\caption{}
\\centering",
rb1,
"\\end{minipage}%
\\begin{minipage}{.5\\linewidth}
\\centering
\\caption{}",
rb2,
"\\end{minipage}
\\end{table}"
))
cat(c('<table><tr valign="top"><td>', rb1, '</td><td>', rb2, '</td><tr></table>'), sep = '')
rb1 = kable(summary(unscaled_training_set[c(3,4)]), format = "html", col.names = c("Unscaled Training Set"))
rb1 = kable(summary(unscaled_training_set[c(3,4)]), format = "html", col.names = c("Unscaled Training Set", ""))
rb2 = kable(summary(training_set[c(3,4)]), col.names = c("Scaled Training Set", ""))
cat(c('<table><tr valign="top"><td>', rb1, '</td><td>', rb2, '</td><tr></table>'), sep = '')
rb1 = kable(summary(unscaled_training_set[c(3,4)]), format = "html", col.names = c("Unscaled Training Set", ""), output = FALSE)
rb2 = kable(summary(training_set[c(3,4)]), format = "html", col.names = c("Scaled Training Set", ""), output = FALSE)
cat(c('<table><tr valign="top"><td>', rb1, '</td><td>', rb2, '</td><tr></table>'), sep = '')
rb1 = kable(summary(unscaled_training_set[c(3,4)]), format = "html", output = FALSE)#, col.names = c("Unscaled Training Set", ""))
rb2 = kable(summary(training_set[c(3,4)]), format = "html", output = FALSE)#, col.names = c("Scaled Training Set", ""))
cat(c('<table><tr valign="top"><td>', rb1, '</td><td>', rb2, '</td><tr></table>'), sep = '')
rb1 = kable(summary(unscaled_training_set[c(3,4)]), format = "html", output = FALSE, col.names = c("Unscaled Training Set", ""))
rb2 = kable(summary(training_set[c(3,4)]), format = "html", output = FALSE, col.names = c("Scaled Training Set", ""), table.attr ='cellpadding="3"')
cat(c('<table><tr valign="top"><td>', rb1, '</td><td>', rb2, '</td><tr></table>'), sep = '')
rb1 = kable(summary(unscaled_training_set[c(3,4)]), format = "html", output = FALSE, col.names = c("Unscaled Training Set", ""))
rb2 = kable(summary(training_set[c(3,4)]), format = "html", output = FALSE, col.names = c("Scaled Training Set", ""), table.attr ='cellpadding="3"')
cat(c('<table><tr valign="top"><td>', rb1, '</td><td>', rb2, '</td><tr></table>'), sep = '')
kable_styling()
install.packages("kableExtra")
rb1 = kable(summary(unscaled_training_set[c(3,4)]), format = "html", output = FALSE, col.names = c("Unscaled Training Set", ""))
rb2 = kable(summary(training_set[c(3,4)]), format = "html", output = FALSE, col.names = c("Scaled Training Set", ""), table.attr ='cellpadding="3"')
cat(c('<table><tr valign="top"><td>', rb1, '</td><td>', rb2, '</td><tr></table>'), sep = '')
kable_styling()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
library(kableExtra)
rb1 = kable(summary(unscaled_training_set[c(3,4)]), format = "html", output = FALSE, col.names = c("Unscaled Training Set", ""))
rb2 = kable(summary(training_set[c(3,4)]), format = "html", output = FALSE, col.names = c("Scaled Training Set", ""), table.attr ='cellpadding="3"')
cat(c('<table><tr valign="top"><td>', rb1, '</td><td>', rb2, '</td><tr></table>'), sep = '')
kable_styling()
rb1 = kable(summary(unscaled_training_set[c(3,4)]), format = "html", output = FALSE, col.names = c("Unscaled Training Set", ""))
kable_styling(rb1)
rb2 = kable(summary(training_set[c(3,4)]), format = "html", output = FALSE, col.names = c("Scaled Training Set", ""), table.attr ='cellpadding="3"')
kable_styling(rb2)
cat(c('<table><tr valign="top"><td>', rb1, '</td><td>', rb2, '</td><tr></table>'), sep = '')
?kable
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
library(kableExtra)
SNA = read.csv("Social_Network_Ads.csv", header = TRUE, sep = ",")
str(SNA)
summary(SNA)
library(caTools)
set.seed(seed = 123)
split = sample.split(SNA$Purchased, SplitRatio = 0.75)
unscaled_training_set = subset(SNA, split == TRUE)
unscaled_testing_set = subset(SNA, split == FALSE)
training_set = unscaled_training_set
training_set[c(3,4)] = scale(unscaled_training_set[c(3,4)])
testing_set = unscaled_testing_set
testing_set[c(3,4)] = scale(unscaled_testing_set[c(3,4)])
summary(unscaled_training_set[c(3,4)])%>%kable()%>%kable_styling()
summary(training_set[c(3,4)])%>%kable()%>%kable_styling()
model = glm(Purchased ~ Age, family = binomial, data = training_set)
summary(model)
coef(summary(model))
?kable
?kable()
?kable
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
SNA = read.csv("Social_Network_Ads.csv", header = TRUE, sep = ",")
str(SNA)
kable()
kable(summary(SNA))
kable(summary(SNA), format="html")
kable(summary(SNA), format="html")%>%kable_styling()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
SNA = read.csv("Social_Network_Ads.csv", header = TRUE, sep = ",")
str(SNA)
kable(summary(SNA), format="html")%>%kable_styling()
library(caTools)
set.seed(seed = 123)
split = sample.split(SNA$Purchased, SplitRatio = 0.75)
unscaled_training_set = subset(SNA, split == TRUE)
unscaled_testing_set = subset(SNA, split == FALSE)
training_set = unscaled_training_set
training_set[c(3,4)] = scale(unscaled_training_set[c(3,4)])
testing_set = unscaled_testing_set
testing_set[c(3,4)] = scale(unscaled_testing_set[c(3,4)])
summary(unscaled_training_set[c(3,4)])%>%kable()%>%kable_styling()
summary(training_set[c(3,4)])%>%kable()%>%kable_styling()
model = glm(Purchased ~ Age, family = binomial, data = training_set)
summary(model)
coef(summary(model))
AIC(model)
?ggplot
library(ggplot2)
#ggplot(training_set, )
?ggplot
library(ggplot2)
ggplot(training_set, aes(x = Age, y = Purchased))
+ geom_point()
library(ggplot2)
ggplot(training_set, aes(x = Age, y = Purchased))  + geom_point() + stat_smooth((method="glm", method.args=list(family = "binomial", se = FALSE)))
library(ggplot2)
ggplot(training_set, aes(x = Age, y = Purchased))  + geom_point() + stat_smooth(method="glm", method.args=list(family = "binomial", se = FALSE))
library(ggplot2)
ggplot(training_set, aes(x = Age, y = Purchased))  + geom_point() + stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE)
model2 = glm(Purchased ~ Age + EstimatedSalary, family = binomial, data=training_set)
summary(model2)%>%kable()%>%kable_styling()
summary(model2)%>%kable()%>%kable_styling()
summary(model2)
coef(summary(model))%>%kable()%>%kable_styling()
coef(summary(model2))%>%kable()%>%kable_styling()
summary(unscaled_training_set[c(3,4)])%>%kable()%>%kable_styling()
coef(summary(training_set))%>%kable()%>%kable_styling()
summary(unscaled_training_set)%>%kable()%>%kable_styling()
summary(training_set)%>%kable()%>%kable_styling()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
SNA = read.csv("Social_Network_Ads.csv", header = TRUE, sep = ",")
str(SNA)
kable(summary(SNA), format="html")%>%kable_styling()
library(caTools)
set.seed(seed = 123)
split = sample.split(SNA$Purchased, SplitRatio = 0.75)
unscaled_training_set = subset(SNA, split == TRUE)
unscaled_testing_set = subset(SNA, split == FALSE)
training_set = unscaled_training_set
training_set[c(3,4)] = scale(unscaled_training_set[c(3,4)])
testing_set = unscaled_testing_set
testing_set[c(3,4)] = scale(unscaled_testing_set[c(3,4)])
summary(unscaled_training_set[c(3,4)])%>%kable()%>%kable_styling()
summary(training_set[c(3,4)])%>%kable()%>%kable_styling()
model = glm(Purchased ~ Age, family = binomial, data = training_set)
summary(model)
coef(summary(model))%>%kable()%>%kable_styling()
AIC(model)
library(ggplot2)
ggplot(training_set, aes(x = Age, y = Purchased))  + geom_point() + stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE)
model2 = glm(Purchased ~ Age + EstimatedSalary, family = binomial, data=training_set)
pred = predict(model2, newdata = testing_set[c(3,4)], type = "response")
pred = predict(model2, newdata = testing_set[c(3,4)], type = "response")
sorted_pred = ifelse(pred > 0.5, 1, 0)
sorted_pred
less(sorted_pred)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
SNA = read.csv("Social_Network_Ads.csv", header = TRUE, sep = ",")
str(SNA)
kable(summary(SNA), format="html")%>%kable_styling()
library(caTools)
set.seed(seed = 123)
split = sample.split(SNA$Purchased, SplitRatio = 0.75)
unscaled_training_set = subset(SNA, split == TRUE)
unscaled_testing_set = subset(SNA, split == FALSE)
training_set = unscaled_training_set
training_set[c(3,4)] = scale(unscaled_training_set[c(3,4)])
testing_set = unscaled_testing_set
testing_set[c(3,4)] = scale(unscaled_testing_set[c(3,4)])
summary(unscaled_training_set[c(3,4)])%>%kable()%>%kable_styling()
summary(training_set[c(3,4)])%>%kable()%>%kable_styling()
model = glm(Purchased ~ Age, family = binomial, data = training_set)
summary(model)
coef(summary(model))%>%kable()%>%kable_styling()
AIC(model)
library(ggplot2)
ggplot(training_set, aes(x = Age, y = Purchased))  + geom_point() + stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE)
model2 = glm(Purchased ~ Age + EstimatedSalary, family = binomial, data=training_set)
coef(summary(model2))%>%kable()%>%kable_styling()
pred = predict(model2, newdata = testing_set[c(3,4)], type = "response")
sorted_pred = ifelse(pred > 0.5, 1, 0)
confusion_matrix = table(testing_set[,5], sorted_pred)
confusion_matrix
ggplot(data = testing_set, mapping = aes(x = Prediction, y = Purchase))
ggplot(data = sorted_pred)
ggplot(data = testing_set)
True = factor(c(0, 0, 1, 1))
Predicted = factor(c(0, 1, 0, 1))
df = data.frame(True, Predicted, confusion_matrix)
True = factor(c(0, 0, 1, 1))
Predicted = factor(c(0, 1, 0, 1))
df = data.frame(True, Predicted, confusion_matrix)
ggplot(data =  df, mapping = aes(x = True, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
True = factor(c(0, 0, 1, 1))
Predicted = factor(c(0, 1, 0, 1))
df = data.frame(True, Predicted, confusion_matrix)
ggplot(data =  df, mapping = aes(x = True, y = Predicted)) +
geom_tile(aes(fill = confusion_matrix), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
True = factor(c(0, 0, 1, 1))
Predicted = factor(c(0, 1, 0, 1))
df = data.frame(True, Predicted, confusion_matrix)
ggplot(data =  df, mapping = aes(x = True, y = Predicted)) +
geom_tile(aes(fill = unlist(confusion_matrix)), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
True = factor(c(0, 0, 1, 1))
Predicted = factor(c(0, 1, 0, 1))
df = data.frame(True, Predicted, confusion_matrix)
ggplot(data =  df, mapping = aes(x = True, y = Predicted)) +
geom_tile(aes(fill = unlist(confusion_matrix,use.names = FALSE)), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
?unlist
unlist(confusion_matrix,use.names = FALSE)
? table
confusion_matrix = ftable(testing_set[,5], sorted_pred)
True = factor(c(0, 0, 1, 1))
Predicted = factor(c(0, 1, 0, 1))
df = data.frame(True, Predicted, confusion_matrix)
confusion_matrix = ftable(testing_set[,5], sorted_pred)
ggplot(data =  df, mapping = aes(x = True, y = Predicted)) +
geom_tile(aes(fill = unlist(confusion_matrix,use.names = FALSE)), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
True = factor(c(0, 0, 1, 1))
Predicted = factor(c(0, 1, 0, 1))
df = data.frame(True, Predicted, confusion_matrix)
confusion_matrix = ftable(testing_set[,5], sorted_pred)
ggplot(data =  df, mapping = aes(x = True, y = Predicted)) +
geom_tile(aes(fill = confusion_matrix), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
geom_tile
?geom_tile
True = factor(c(0, 0, 1, 1))
Predicted = factor(c(0, 1, 0, 1))
df = data.frame(True, Predicted, confusion_matrix)
confusion_matrix = ftable(testing_set[,5], sorted_pred)
ggplot(data =  df, mapping = aes(x = True, y = Predicted)) +
geom_tile(data = confusion_matrix, colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
True = factor(c(0, 0, 1, 1))
Predicted = factor(c(0, 1, 0, 1))
df = data.frame(True, Predicted, confusion_matrix)
#confusion_matrix = ftable(testing_set[,5], sorted_pred)
ggplot(data =  df, mapping = aes(x = True, y = Predicted)) +
geom_tile(data = confusion_matrix, colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
True = factor(c(0, 0, 1, 1))
Predicted = factor(c(0, 1, 0, 1))
df = data.frame(True, Predicted, confusion_matrix)
#confusion_matrix = ftable(testing_set[,5], sorted_pred)
ggplot(data =  df, mapping = aes(x = True, y = Predicted)) +
geom_tile(data = as.data.frame.matrix(confusion_matrix), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
True = factor(c(0, 0, 1, 1))
Predicted = factor(c(0, 1, 0, 1))
df = data.frame(True, Predicted, confusion_matrix)
#confusion_matrix = ftable(testing_set[,5], sorted_pred)
ggplot(data =  df, mapping = aes(x = True, y = Predicted)) +
geom_tile(data = as.data.frame.matrix(confusion_matrix), colour = "white")
True = factor(c(0, 0, 1, 1))
Predicted = factor(c(0, 1, 0, 1))
df = data.frame(True, Predicted, confusion_matrix)
#confusion_matrix = ftable(testing_set[,5], sorted_pred)
ggplot(data =  df) +
geom_tile(data = as.data.frame.matrix(confusion_matrix), colour = "white")
?specificity
??specificity
install.packages("InformationValue")
??specificity
??specificity
?specificity
install.packages("caret")
confusion_matrix = confusionMatrix(testing_set$Purchased, sorted_pred, cutoff = 0.5)
library(ModelMetrics)
confusion_matrix = confusionMatrix(testing_set$Purchased, sorted_pred, cutoff = 0.5)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
library(k)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
SNA = read.csv("Social_Network_Ads.csv", header = TRUE, sep = ",")
str(SNA)
kable(summary(SNA), format="html")%>%kable_styling()
library(caTools)
set.seed(seed = 123)
split = sample.split(SNA$Purchased, SplitRatio = 0.75)
unscaled_training_set = subset(SNA, split == TRUE)
unscaled_testing_set = subset(SNA, split == FALSE)
training_set = unscaled_training_set
training_set[c(3,4)] = scale(unscaled_training_set[c(3,4)])
testing_set = unscaled_testing_set
testing_set[c(3,4)] = scale(unscaled_testing_set[c(3,4)])
summary(unscaled_training_set[c(3,4)])%>%kable()%>%kable_styling()
summary(training_set[c(3,4)])%>%kable()%>%kable_styling()
model = glm(Purchased ~ Age, family = binomial, data = training_set)
summary(model)
coef(summary(model))%>%kable()%>%kable_styling()
AIC(model)
library(ggplot2)
ggplot(training_set, aes(x = Age, y = Purchased))  + geom_point() + stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE)
model2 = glm(Purchased ~ Age + EstimatedSalary, family = binomial, data=training_set)
coef(summary(model2))%>%kable()%>%kable_styling()
pred = predict(model2, newdata = testing_set[c(3,4)], type = "response")
sorted_pred = ifelse(pred > 0.5, 1, 0)
library(ModelMetrics)
confusion_matrix = confusionMatrix(testing_set$Purchased, sorted_pred, cutoff = 0.5)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
SNA = read.csv("Social_Network_Ads.csv", header = TRUE, sep = ",")
str(SNA)
kable(summary(SNA), format="html")%>%kable_styling()
library(caTools)
set.seed(seed = 123)
split = sample.split(SNA$Purchased, SplitRatio = 0.75)
unscaled_training_set = subset(SNA, split == TRUE)
unscaled_testing_set = subset(SNA, split == FALSE)
training_set = unscaled_training_set
training_set[c(3,4)] = scale(unscaled_training_set[c(3,4)])
testing_set = unscaled_testing_set
testing_set[c(3,4)] = scale(unscaled_testing_set[c(3,4)])
summary(unscaled_training_set[c(3,4)])%>%kable()%>%kable_styling()
summary(training_set[c(3,4)])%>%kable()%>%kable_styling()
model = glm(Purchased ~ Age, family = binomial, data = training_set)
summary(model)
coef(summary(model))%>%kable()%>%kable_styling()
AIC(model)
library(ggplot2)
ggplot(training_set, aes(x = Age, y = Purchased))  + geom_point() + stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE)
model2 = glm(Purchased ~ Age + EstimatedSalary, family = binomial, data=training_set)
coef(summary(model2))%>%kable()%>%kable_styling()
pred = predict(model2, newdata = testing_set[c(3,4)], type = "response")
sorted_pred = ifelse(pred > 0.5, 1, 0)
confusion_matrix = table(testing_set[,5], sorted_pred)
confusion_matrix
library(caret)
specificity = specificity(testing_set$Purchased, sorted_pred, cutoff = 0.5)
sensivity = confusion_matrix[1,1]  / (confusion_matrix[1,1] + confusion_matrix[1,2])
sensivity
specificity = confusion_matrix[2,2]  / (confusion_matrix[2,1] + confusion_matrix[2,2])
specificity
accuracy = (confusion_matrix[1,1] + confusion_matrix[2,2]) / (confusion_matrix[1,1] + confusion_matrix[1,2] + confusion_matrix[2,1] + confusion_matrix[2,2])
precision = sensivity = confusion_matrix[1,1]  / (confusion_matrix[1,1] + confusion_matrix[2,1])
precision
install.packages("ROCR")
library(ROCR)
library(ROCR)
score = prediction(pred, testing_set[,5])
performance(score, "auc")
plot(performance(score,"tpr","fpr"),col="green")
abline(0,1,lty=8)
library(ROCR)
library(ROCR)
